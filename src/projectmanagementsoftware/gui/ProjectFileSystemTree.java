/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package projectmanagementsoftware.gui;

import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JLabel;
import javax.swing.JPanel;
import projectmanagementsoftware.Project;
import projectmanagementsoftware.linkedlist.LinkedList;
import projectmanagementsoftware.tree.Tree;
import projectmanagementsoftware.tree.TreeNode;
import projectmanagementsoftware.wbs.WBSNode;
import projectmanagementsoftware.wbs.WorkPackage;

/**
 *
 * @author david
 */
public class ProjectFileSystemTree extends javax.swing.JPanel {
    private Tree<ProjectFileSystemTreeNode> tree;
    private ProjectFileSystemTreeNode selected;
    private MouseListener secondaryListener;
    
    /**
     * Creates new form FileSystemTreeAnimation
     */
    public ProjectFileSystemTree() {
        initComponents();
        this.tree = null;
        this.selected = null;
    }
    
    public void setSecondaryClickListener(MouseListener listener) {
        this.secondaryListener = listener;
    }
    
    public void setProjects(LinkedList<Project> projects) {
        TreeNode<WBSNode> root = new TreeNode<>(new WorkPackage(Integer.toString(Integer.MAX_VALUE), "/"));
        
        projects.forEach(project -> {
            root.addChild(project.getWbs().getRoot());
        });
        
        final ProjectFileSystemTree treeComponent = this;
        
        this.tree = new Tree<>(root).mapWithLevelCount((element, level) -> {
            ProjectFileSystemTreeNode node = new ProjectFileSystemTreeNode(element, level - 1);
            
            node.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    Object source = e.getSource();
                    ProjectFileSystemTreeNode node;
                    
                    if (source instanceof ProjectFileSystemTreeNode)
                        node = (ProjectFileSystemTreeNode) source;
                    else
                        node = (ProjectFileSystemTreeNode) ((Component) source).getParent();
                    
                    treeComponent.setSelected(node);
                    e.setSource(node.get());
                    treeComponent.secondaryListener.mouseClicked(e);
                }
            });
            
            node.addExpandMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    ProjectFileSystemTreeNode node = (ProjectFileSystemTreeNode) ((JLabel) e.getSource()).getParent();
                    node.setExpanded(!node.getExpanded());
                    treeComponent.reloadComponent();
                }
                
            });
            
            return node;
        });
        
        this.reloadComponent();
    }
    
    public ProjectFileSystemTreeNode getSelected() {
        return this.selected;
    }
    
    public void setSelected(ProjectFileSystemTreeNode selected) {
        if (this.selected != null)
            this.selected.setSelected(false);
        
        if (selected != null)
            selected.setSelected(true);
        
        this.selected = selected;
    }
    
    public void reloadComponent() {
        this.mainPanel.removeAll();
        
        this.tree.preorder(node -> {
            if (node.get().getName().equals(Integer.toString(Integer.MAX_VALUE)))
                return;
            
            this.mainPanel.add(node);
        }, node -> !node.getExpanded());
        
        this.revalidate();
        this.repaint();
    }
    
    public Tree<ProjectFileSystemTreeNode> get() {
        return tree;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(250, 316));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        mainPanel.setMaximumSize(new java.awt.Dimension(100000000, 10000000));
        mainPanel.setLayout(new javax.swing.BoxLayout(mainPanel, javax.swing.BoxLayout.PAGE_AXIS));
        jScrollPane1.setViewportView(mainPanel);

        add(jScrollPane1);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables
}
